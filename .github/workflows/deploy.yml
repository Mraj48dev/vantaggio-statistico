name: Deploy to Vercel

# Deploy automatico su Vercel quando CI passa su main branch
on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]

# Permissions necessarie per deployment
permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Solo se CI √® passata con successo
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    environment:
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $DEPLOYMENT_URL"

      - name: Run post-deployment checks
        run: |
          # Aspetta che il deployment sia disponibile
          sleep 30

          # Health check
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.preview-url }}/api/health)
          if [ $HEALTH_CHECK -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $HEALTH_CHECK"
            exit 1
          fi

          # Performance check (optional)
          echo "üîç Running basic performance check..."
          curl -s -w "Response time: %{time_total}s\n" -o /dev/null ${{ steps.deploy.outputs.preview-url }}

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful to production"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Notify team (optional)
        if: success()
        run: |
          echo "üéâ Vantaggio Statistico successfully deployed to production!"
          echo "URL: ${{ steps.deploy.outputs.preview-url }}"
          # Qui potresti aggiungere notifiche Slack/Discord/email se necessario

  # Job per rollback automatico in caso di problemi critici
  health-monitor:
    name: Post-Deploy Health Monitor
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()

    steps:
      - name: Wait for deployment stabilization
        run: sleep 60

      - name: Extended health checks
        run: |
          BASE_URL="${{ needs.deploy.outputs.preview-url }}"

          # Check multiple endpoints
          ENDPOINTS=(
            "/api/health"
            "/api/health/db"
            "/login"
          )

          for endpoint in "${ENDPOINTS[@]}"; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}${endpoint}")
            if [ $STATUS -ge 400 ]; then
              echo "‚ùå Endpoint $endpoint failed with status: $STATUS"
              exit 1
            else
              echo "‚úÖ Endpoint $endpoint is healthy"
            fi
          done

      - name: Database connectivity check
        run: |
          # Test database connection through API
          DB_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ needs.deploy.outputs.preview-url }}/api/health/db")
          if [ $DB_STATUS -eq 200 ]; then
            echo "‚úÖ Database connection is healthy"
          else
            echo "‚ùå Database connection failed"
            # In un ambiente reale, qui potresti triggerare un rollback automatico
            exit 1
          fi

      - name: Performance baseline check
        run: |
          # Test response times for key pages
          RESPONSE_TIME=$(curl -s -w "%{time_total}" -o /dev/null "${{ needs.deploy.outputs.preview-url }}")

          # Converti in millisecondi per confronto
          RESPONSE_MS=$(echo "$RESPONSE_TIME * 1000" | bc)

          if (( $(echo "$RESPONSE_MS > 3000" | bc -l) )); then
            echo "‚ö†Ô∏è Response time is high: ${RESPONSE_MS}ms"
            # Potrebbe essere solo un warning, non necessariamente un failure
          else
            echo "‚úÖ Response time is acceptable: ${RESPONSE_MS}ms"
          fi